(function () {
  'use strict';

  const {create, freeze, setPrototypeOf} = Object;

  function ModuleNamespace() {}
  const toPrimitive = () => 'ModuleNamespace';
  const toString = () => 'class ModuleNamespace {}';
  setPrototypeOf(toString, null);
  setPrototypeOf(toPrimitive, null);

  ModuleNamespace.prototype = create(null, {
    [Symbol.toPrimitive]: {value: toPrimitive, enumerable: false},
    [Symbol.toStringTag]: {value: 'ModuleNamespace', enumerable: false},
  });

  freeze(setPrototypeOf(ModuleNamespace, create(null, {toString: {value: toString}})));

  const {defineProperty, getOwnPropertyDescriptor} = Reflect;

  const noop = () => {};

  const define = (target, property, value, enumerable = false, configurable = false) =>
    defineProperty(target, property, {value, enumerable, configurable}) && value;

  const bind = (target, property, get, enumerable = false, configurable = false) =>
    defineProperty(target, property, {get, set: noop, configurable, enumerable});

  const copy = (target, source, identifier, alias = identifier) =>
    defineProperty(target, alias, getOwnPropertyDescriptor(source, identifier));

  class ModuleNamespaces {
    import(url) {
      return (
        this[url] ||
        define(this, url, Module.import(url).then(
          namespace => (bind(this, url, () => namespace, true, false), namespace),
        ), true, true)
      );
    }
  }

  const Exports = /`export *{([^}`;\*]*)}`/gm;
  const Mappings = /([^\s,]+)(?: +as +([^\s,]+))?/g;

  const evaluate = code => (0, eval)(code);

  const wrap = source => `
(async (module, exports) => {
  with(module.scope) {
    (function (module, exports) {
      "use strict";
      module.meta.source = ${JSON.stringify(source)};
      ${source || ''}
    })(module, exports);
  }
})
`;

  const rewrite = source =>
    source.replace(Exports, (match, mappings) => {
      let bindings = [];
      while ((match = Mappings.exec(mappings))) {
        const [, identifier, binding] = match;
        bindings.push(`${binding || '()'} => ${identifier}`);
      }
      return (bindings.length && `exports(${bindings.join(', ')})`) || '';
    });

  const parseFunction = source =>
    (typeof source === 'function' &&
      /^\(module, exports\) *=> *{([^]*)}$|/.exec(`${source}`.trim())[1]) ||
    '';

  const createEvaluator = ƒ => evaluate(wrap(rewrite(parseFunction(ƒ))));

  const {freeze: freeze$1, setPrototypeOf: setPrototypeOf$1} = Object;

  const ResolvedPromise = Promise.resolve();
  const Identifier = /[^\n\s\(\)\{\}\-=+*/%`"~!&.:^<>,]+/;
  const Mappings$1 = /([^\s,]+)(?: +as +([^\s,]+))?/g;
  const BindingDeclarations = /\b(import|export)\b +(?:{ *(.*?) *}|([*] +as +\S+|\S+)|)(?: +from\b|)(?: +(['"])(.*?)\4|)/g;
  const Specifier = /^(?:([a-z]+[^/]*?:)\/{0,2}(\b[^/]+\/?)?)(\.{0,2}\/)?([^#?]*?)(\?[^#]*?)?(#.*?)?$/u;
  Specifier.parse = specifier => {
    const [url, schema, domain, root, path, query, fragment] = Specifier.exec(specifier) || '';
    return {url, schema, domain, root, path, query, fragment, specifier};
  };

  class Module {
    constructor(url, evaluator, imports) {
      const enumerable = false;
      define(this, 'url', url, enumerable);
      define(this, 'evaluator', createEvaluator(evaluator), enumerable);
      define(this, 'context', Object.create(null), enumerable, false);
      define(this, 'bindings', Object.create(null), enumerable);
      define(this, 'links', Module.links(imports || `${evaluator}`, url), enumerable, false);
      this.namespaces || define(new.target.prototype, 'namespaces', new ModuleNamespaces(), false);
      Module.map[url] = this;
    }

    link() {
      const promise = Module.link(this);
      define(this, 'link', () => promise);
      return promise;
    }

    instantiate() {
      const instance = this.instance || Module.instantiate(this);
      const promise = this.link().then(() => instance);
      define(this, 'instantiate', () => promise);
      return promise;
    }

    evaluate() {
      const promise = Module.evaluate(this).then(() => this.namespace);
      define(this, 'evaluate', () => promise);
      return promise;
    }

    static async link(module) {
      const enumerable = true;
      const {namespaces, context, bindings, links} = module;
      const promises = [];
      const imports = {};
      const dependencies = {[module.url]: true};

      // let context;
      for (const binding in links) {
        const link = links[binding];
        const {intent, specifier, identifier, url} = link;
        if (!url) continue;
        // log({specifier, identifier, url});
        const namespace = namespaces[url];
        // const linked = dependencies[url] || (dependencies[url] = Module.map[url].link());
        const imported =
          url &&
          (imports[url] || (imports[url] = (namespace && ResolvedPromise) || namespaces.import(url)));
        if (intent === 'import') {
          promises.push(
            imported.then(() => {
              identifier === '*'
                ? copy(bindings, namespaces, url, binding)
                : copy(bindings, namespaces[url], identifier, binding);
            }),
          );
          bind(bindings, binding, noop, enumerable, true);
        } else if (intent === 'export') {
          promises.push(
            imported.then(async () => {
              context.export.from(link);
            }),
          );
        }
      }

      await Promise.all(promises);
    }

    static instantiate(module) {
      const enumerable = false;
      const namespace = new ModuleNamespace();
      const {context, bindings, namespaces} = module;
      context.export = (...exports) => void Module.bind(namespace, ...exports);
      context.export.from = (...links) => {
        for (const link of links) {
          const {intent, specifier, identifier, binding, url} = link;
          if (intent !== 'export') continue;
          url in namespaces
            ? copy(namespace, namespaces[url], identifier, binding)
            : bind(namespace, binding, () => namespaces[url][identifier], enumerable, false);
        }
      };
      context.export.default = value => void Module.bind(namespace, {default: () => value});

      const scope = setPrototypeOf$1(bindings, ModuleScope);
      define(bindings, 'module', context, false, true);
      define(context, 'meta', Object.create(null), false, false);
      define(context, 'scope', scope, enumerable, false);
      freeze$1(context);
      return define(module, 'instance', {namespace, context});
    }

    static async evaluate(module) {
      const {bindings, namespace, context} = await module.instantiate();
      try {
        await module.evaluator(context, context.export);
        return define(module, 'namespace', namespace);
      } catch (exception) {
        console.warn(exception);
        define(module, 'exception', exception);
      }
    }

    static async import(url) {
      const module = this.map[url];
      return module.namespace || (await module.evaluate());
    }

    static resolve(specifier, referrer) {
      specifier = `${(specifier && specifier) || ''}`;
      referrer = `${(referrer && referrer) || ''}` || '';
      const key = `[${referrer}][${specifier}]`;
      const cache = this.resolve.cache || (this.resolve.cache = {});
      let url = cache[key];
      if (url) return url.link;
      const {schema, domain} = Specifier.parse(specifier);
      const origin = (schema && `${schema}${domain || '//'}`) || `file:///`;
      referrer =
        (!referrer && origin) ||
        (cache[`[${referrer}]`] || (cache[`[${referrer}]`] = new URL(referrer, origin))).href;
      url = cache[key] = new URL(specifier, referrer);
      // log({specifier, referrer, origin, schema, domain, url: url.href});
      return (url.link = url.href.replace(/^file:\/\/\//, ''));
    }

    static links(source, referrer) {
      // log({declarations});
      let match;
      const links = {};
      while ((match = BindingDeclarations.exec(source))) {
        // log(match[0]);
        const [declaration, intent, bindings, binding, , specifier] = match;
        const mappings = (
          (binding && ((binding.startsWith('* ') && binding) || `default as ${binding}`)) ||
          bindings ||
          ''
        ).split(/ *, */g);
        const url = (specifier && this.resolve(specifier, referrer)) || undefined;
        // log({declaration, bindings, binding, specifier, mappings});
        while ((match = Mappings$1.exec(mappings))) {
          const [, identifier, binding = identifier] = match;
          links[binding] = {intent, specifier, identifier, binding, url};
        }
      }
      return links;
    }

    static bind(namespace, ...bindings) {
      for (const binding of bindings) {
        const type = typeof binding;
        if (type === 'function') {
          const identifier = (Identifier.exec(binding) || '')[0];
          identifier && bind(namespace, identifier, binding, true);
        } else if (type === 'object') {
          for (const identifier in binding) {
            identifier === (Identifier.exec(identifier) || '')[0] &&
              bind(namespace, identifier, binding[identifier], true);
          }
        }
      }
    }
  }

  Module.map = {};
  setPrototypeOf$1(Module, Module.prototype);

  // const BindExpression = /^(?:\(?\)?|(\S+)) => (\S+)$/;
  // const BindingDeclarations = /\b(import|export)\b(?: +(?:{ *([^};]*) *}|([*] +as +\S+|\S+)) +from\b|) +(['"])(.*?)\4/g;
  // const BindingDeclarations = /\b(import|export)\b(?: +(?:{ *([^};]*) *}|([*] +as +\S+|\S+)) +from\b|(?= +['"]))(?: +(['"])(.*?)\4| *;? *\n)/g;

  const {freeze: freeze$2, setPrototypeOf: setPrototypeOf$2} = Object;
  const GlobalScope = (0, eval)('this');
  const globals = (({eval: $eval, Object}) => ({eval: $eval, Object, Module}))(GlobalScope);

  var ModuleScope = new Proxy(freeze$2(setPrototypeOf$2({...globals}, GlobalScope)), {
    get: (target, property) => {
      if (typeof property !== 'string') return;
      if (property in globals) return globals[property];
      const value = GlobalScope[property];
      return (value && typeof value === 'function' && value.bind(GlobalScope)) || value;
    },
    set: (target, property) => {
      throw ReferenceError(`${property} is not defined`);
    },
  });

  ((global) => {
    global.ModuleScope = ModuleScope;
  })(
    (typeof self === 'object' && self && self.self) ||
    (typeof global === 'object' && global && global.global) ||
    (() => (0, eval)('this'))()
  );

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
